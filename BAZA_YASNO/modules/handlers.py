from aiogram import Dispatcher, types
from aiogram.filters import Command
from .utils import (
    save_registration_to_sheet,
    read_users_from_sheet,
    get_weather_forecast,
    get_from_env,
)
import datetime
import logging

logger = logging.getLogger("telegram_bot_handlers")
dp = Dispatcher()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —è Telegram-–±–æ—Ç –±–∞–∑—ã –æ—Ç–¥—ã—Ö–∞ –Ø–°–ù–û!) –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥ –≤—ã–±–µ—Ä–∏—Ç–µ /help")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/register - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
        "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "/weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
@dp.message(Command("register"))
async def register_command(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –†–∞–∑—Ä–µ—à–∞—é", callback_data="register_yes"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å", callback_data="register_no"),
            ]
        ]
    )
    await message.answer(
        "–í—ã —Ä–∞–∑—Ä–µ—à–∞–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞—à Telegram ID –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏?",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–æ–≤
@dp.callback_query(lambda c: c.data and c.data.startswith('register'))
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "unknown"
    full_name = f"{callback_query.from_user.first_name} {callback_query.from_user.last_name or ''}".strip()
    if callback_query.data == "register_yes":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        save_registration_to_sheet(user_id, username, full_name)
        await callback_query.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    elif callback_query.data == "register_no":
        await callback_query.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback_query.answer()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ
@dp.message(Command("check"))
async def check_user(message: types.Message):
    user_id = str(message.from_user.id)
    users_dict = read_users_from_sheet()
    if user_id in users_dict:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather
@dp.message(Command("weather"))
async def weather_command(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π)")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /weather
@dp.message(lambda message: len(message.text.split(".")) == 3)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
async def process_weather_date(message: types.Message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        date_parts = message.text.split(".")
        day, month, year = map(int, date_parts)
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç datetime –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
        user_date = datetime.date(year, month, day)
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
        today = datetime.date.today()
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
        delta = (user_date - today).days
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if delta < 0:
            await message.answer("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.")
            return
        elif delta > 5:
            await message.answer("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –ø–æ–∑–∂–µ —á–µ–º —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.")
            return
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        api_key = get_from_env("OPENWEATHER_API_KEY")
        lat = "44.605298"  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—è
        lon = "33.527107"
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π
        weather_data = get_weather_forecast(lat, lon, api_key)
        if not weather_data:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
            return
        forecast_list = weather_data.get("list", [])
        result = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {message.text}:\n\n"
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
        filtered_forecast = [
            entry for entry in forecast_list
            if datetime.datetime.fromtimestamp(entry["dt"]).date() == user_date
        ]
        # –ï—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if not filtered_forecast:
            await message.answer("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ 3-—á–∞—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        for entry in filtered_forecast:
            temp = entry['main']['temp']  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ ¬∞C
            description = entry['weather'][0]['description'].capitalize()
            time = datetime.datetime.fromtimestamp(entry["dt"]).strftime("%H:%M")
            feels_like = entry['main']['feels_like']  # –û—â—É—â–∞–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            humidity = entry['main']['humidity']  # –í–ª–∞–∂–Ω–æ—Å—Ç—å
            wind_speed = entry['wind']['speed']  # –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞
            result += (
                f"‚è∞ {time}\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like:.1f}¬∞C)\n"
                f"‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n\n"
            )
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –∫–æ–Ω—Ü–µ
        result += "	"
        await message.answer(result)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message(lambda message: message.text.startswith('/'))
async def unknown_command(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_unknown_message(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞–ø–∏—à–∏—Ç–µ /help"
    )